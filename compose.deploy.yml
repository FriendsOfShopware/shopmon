x-env: &env
  MAIL_FROM: "Shopmon <contact@fos.gg>"
  APP_FILES_DIR: /app/uploads
  APP_DATABASE_PATH: /app/db/shopmon.db
  APP_OAUTH_GITHUB_CLIENT_ID: ${APP_OAUTH_GITHUB_CLIENT_ID}
  APP_OAUTH_GITHUB_CLIENT_SECRET: ${APP_OAUTH_GITHUB_CLIENT_SECRET}
  # From 1password
  FRONTEND_URL: ${FRONTEND_URL}
  APP_SECRET: ${APP_SECRET}
  SMTP_HOST: ${SMTP_HOST}
  SMTP_PORT: ${SMTP_PORT}
  SMTP_SECURE: ${SMTP_SECURE}
  SMTP_USER: ${SMTP_USER}
  SMTP_PASS: ${SMTP_PASS}
  SMTP_REPLY_TO: ${SMTP_REPLY_TO}
  OTEL_SERVICE_NAME: shopmon
  OTEL_RESOURCE_ATTRIBUTES: deployment.environment=${ENVIRONMENT}
  OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4317
  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://otel-collector:4317
  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://otel-collector:4317
  APP_SITESPEED_ENDPOINT: http://sitespeed:3001
  APP_SITESPEED_DATA_FOLDER: ../uploads/sitespeed/

services:
  migrate:
    image: ${IMAGE}
    environment:
      <<: *env
    command: "migrate.ts"
    volumes:
      - db:/app/db
      - uploads:/app/uploads

  app:
    image: ${IMAGE}
    depends_on:
      migrate:
        condition: service_completed_successfully
    environment:
      <<: *env
    labels:
      - traefik.enable=true
      - traefik.http.routers.shopmon-${ENVIRONMENT}.entrypoints=websecure
      - traefik.http.routers.shopmon-${ENVIRONMENT}.rule=Host(`${APP_DOMAIN}`)
      - traefik.http.routers.shopmon-${ENVIRONMENT}.tls=true
      - traefik.http.routers.shopmon-${ENVIRONMENT}.tls.certresolver=cloudflare
      - traefik.http.routers.shopmon-${ENVIRONMENT}.tls.domains[0].main=fos.gg
      - traefik.http.routers.shopmon-${ENVIRONMENT}.tls.domains[0].sans=*.fos.gg

      - traefik.http.middlewares.shopmon-${ENVIRONMENT}.compress=true
      - traefik.http.middlewares.shopmon-${ENVIRONMENT}.compress.encodings=zstd,gzip
      - traefik.http.routers.shopmon-${ENVIRONMENT}.middlewares=shopmon-${ENVIRONMENT}
    volumes:
      - db:/app/db
      - uploads:/app/uploads

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    environment:
      GRAFANA_CLOUD_OTLP_ENDPOINT: ${GRAFANA_CLOUD_OTLP_ENDPOINT}
      GRAFANA_CLOUD_API_KEY: ${GRAFANA_CLOUD_API_KEY}
      GRAFANA_CLOUD_INSTANCE_ID: ${GRAFANA_CLOUD_INSTANCE_ID}

  sitespeed:
    image: ghcr.io/friendsofshopware/shopmon/sitespeed:${ENVIRONMENT}
    environment:
      APP_SITESPEED_DATA_FOLDER: /app/uploads/sitespeed
    volumes:
      - uploads:/app/uploads

  backup:
    image: litestream/litestream
    volumes:
      - db:/data
    command: ["replicate", "--config", "/etc/litestream.yml"]
    configs:
      - source: litestream
        target: /etc/litestream.yml
    environment:
      LITESTREAM_ACCESS_KEY_ID: ${LITESTREAM_ACCESS_KEY_ID}
      LITESTREAM_SECRET_ACCESS_KEY: ${LITESTREAM_SECRET_ACCESS_KEY}
      LITESTREAM_AGE_PUBLIC_KEY: ${LITESTREAM_AGE_PUBLIC_KEY}
      LITESTREAM_AGE_PRIVATE_KEY: ${LITESTREAM_AGE_PRIVATE_KEY}
      ENVIRONMENT: ${ENVIRONMENT}
  
volumes:
  db:
  uploads:

configs:
  litestream:
    content: |
      addr: ":9090"
      dbs:
        - path: /data/shopmon.db
          replicas:
            - type: s3
              bucket: shopmon-backups
              path: db-enc/$ENVIRONMENT/
              endpoint: s3.eu-central-003.backblazeb2.com
              force-path-style: true
              age:
                identities:
                  - $LITESTREAM_AGE_PRIVATE_KEY
                recipients:
                  - $LITESTREAM_AGE_PUBLIC_KEY

  collector:
    content: |
      receivers:
        otlp:
          protocols:
            grpc:
            http:

      processors:
        batch:
        transform/drop_unneeded_resource_attributes:
          error_mode: ignore
          trace_statements:
            - context: resource
              statements:
                - delete_key(attributes, "k8s.pod.start_time")
                - delete_key(attributes, "os.description")
                - delete_key(attributes, "os.type")
                - delete_key(attributes, "process.command_args")
                - delete_key(attributes, "process.executable.path")
                - delete_key(attributes, "process.pid")
                - delete_key(attributes, "process.runtime.description")
                - delete_key(attributes, "process.runtime.name")
                - delete_key(attributes, "process.runtime.version")
          metric_statements:
            - context: resource
              statements:
                - delete_key(attributes, "k8s.pod.start_time")
                - delete_key(attributes, "os.description")
                - delete_key(attributes, "os.type")
                - delete_key(attributes, "process.command_args")
                - delete_key(attributes, "process.executable.path")
                - delete_key(attributes, "process.pid")
                - delete_key(attributes, "process.runtime.description")
                - delete_key(attributes, "process.runtime.name")
                - delete_key(attributes, "process.runtime.version")
          log_statements:
            - context: resource
              statements:
                - delete_key(attributes, "k8s.pod.start_time")
                - delete_key(attributes, "os.description")
                - delete_key(attributes, "os.type")
                - delete_key(attributes, "process.command_args")
                - delete_key(attributes, "process.executable.path")
                - delete_key(attributes, "process.pid")
                - delete_key(attributes, "process.runtime.description")
                - delete_key(attributes, "process.runtime.name")
                - delete_key(attributes, "process.runtime.version")
        transform/add_resource_attributes_as_metric_attributes:
          error_mode: ignore
          metric_statements:
            - context: datapoint
              statements:
                - set(attributes["deployment.environment"], resource.attributes["deployment.environment"])
                - set(attributes["service.version"], resource.attributes["service.version"])

      exporters:
        otlphttp/grafana_cloud:
          # https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlphttpexporter
          endpoint: "$${env:GRAFANA_CLOUD_OTLP_ENDPOINT}"
          auth:
            authenticator: basicauth/grafana_cloud

      extensions:
        basicauth/grafana_cloud:
          # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/extension/basicauthextension
          client_auth:
            username: "$${env:GRAFANA_CLOUD_INSTANCE_ID}"
            password: "$${env:GRAFANA_CLOUD_API_KEY}"

      connectors:
        grafanacloud:
          host_identifiers: ["host.name"]

      service:
        extensions:
          [
            basicauth/grafana_cloud,
          ]
        pipelines:
          traces:
            receivers: [otlp]
            processors:
              [resourcedetection, transform/drop_unneeded_resource_attributes, batch]
            exporters: [otlphttp/grafana_cloud, grafanacloud]
          metrics:
            receivers: [otlp]
            processors:
              [
                resourcedetection,
                transform/drop_unneeded_resource_attributes,
                transform/add_resource_attributes_as_metric_attributes,
                batch,
              ]
            exporters: [otlphttp/grafana_cloud]
          metrics/grafanacloud:
            receivers: [grafanacloud]
            processors: [batch]
            exporters: [otlphttp/grafana_cloud]
          logs:
            receivers: [otlp]
            processors:
              [
                resourcedetection,
                transform/drop_unneeded_resource_attributes,
                batch,
              ]
            exporters: [otlphttp/grafana_cloud]
